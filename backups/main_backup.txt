#include "inc/main.h"
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_spi_flash.h"
#include "driver/gpio.h"
#include "tcpip_adapter.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_event_loop.h"
#include "nvs_flash.h"
#include "esp_http_client.h"
#include "esp_log.h"

#include "inc/HD44780.h"

#define TAG "main"

esp_err_t event_handler(void* ctx, system_event_t* event) {
    if(event->event_id == SYSTEM_EVENT_STA_GOT_IP) {
        printf("Our IP address is " IPSTR "\n", IP2STR(&event->event_info.got_ip.ip_info.ip));
        printf("We have now connected to a station and can do things...\n");
    } else if(event->event_id == SYSTEM_EVENT_STA_START) {
        esp_wifi_connect();
    }
    return ESP_OK;
}

esp_err_t _http_event_handle(esp_http_client_event_t* evt) {
        switch(evt->event_id) {
            case HTTP_EVENT_ERROR:
                ESP_LOGI(TAG, "HTTP_EVENT_ERROR");
                break;
            case HTTP_EVENT_ON_CONNECTED:
                ESP_LOGI(TAG, "HTTP_EVENT_ON_CONNECTED");
                break;
            case HTTP_EVENT_HEADER_SENT:
                ESP_LOGI(TAG, "HTTP_EVENT_HEADER_SENT");
                break;
            case HTTP_EVENT_ON_HEADER:
                ESP_LOGI(TAG, "HTTP_EVENT_ON_HEADER");
                printf("%.*s", evt->data_len, (char*)evt->data);
                break;
            case HTTP_EVENT_ON_DATA:
                ESP_LOGI(TAG, "HTTP_EVENT_ON_DATA, len=%d", evt->data_len);
                if (!esp_http_client_is_chunked_response(evt->client)) {
                    printf("%.*s", evt->data_len, (char*)evt->data);
                }
                break;
            case HTTP_EVENT_ON_FINISH:
                ESP_LOGI(TAG, "HTTP_EVENT_ON_FINISH");
                break;
            case HTTP_EVENT_DISCONNECTED:
                ESP_LOGI(TAG, "HTTP_EVENT_DISCONNECTED");
                break;
        }
        return ESP_OK;
    }

extern "C" void app_main(void) {
    nvs_flash_init();
    tcpip_adapter_init();
    esp_event_loop_init(event_handler, NULL);
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);
    esp_wifi_set_storage(WIFI_STORAGE_RAM);
    esp_wifi_set_mode(WIFI_MODE_STA);
    // wifi_config_t sta_config = {
    //     .sta = {
    //         .ssid = "HUAWEI-B315-5592",
    //         .password = "Y0A5LFB6B5D",
    //         .bssid_set = 0
    //     }
    // };
    wifi_config_t sta_config = {
        .sta =  {
        /* ssid            */ "HUAWEI-B315-5592",
        /* password        */ "Y0A5LFB6B5D",
        /* scan_method     */ {},
        /* bssid_set       */ 0,
        /* bssid           */ {},
        /* channel         */ {},
        /* listen_interval */ {},
        /* sort_method     */ {},
        /* threshold       */ {
            /* rssi            */ {},
            /* authmode        */ WIFI_AUTH_WPA2_PSK},
        /* pmf_cfg         */ {
            /* capable         */ true,
            /* required        */ false},
        /* rm_enabled      */ {},
        /* btm_enabled     */ {},
//      /* mbo_enabled     */ {}, // For IDF 4.4 and higher
        /* reserved        */ {}
    }};
    // wifi_config_t sta_config;
    // sta_config.sta.ssid = (uint8_t[64])"HUAWEI-B315-5592";
    // sta_config.sta.password = (uint8_t[64])"Y0A5LFB6B5D";
    // sta_config.sta.bssid_set = 0;
    esp_wifi_set_config(WIFI_IF_STA, &sta_config);
    esp_wifi_start();

    printf("Hello world!\n");
    gpio_set_direction(GPIO_NUM_2, GPIO_MODE_OUTPUT);

    HD44780 lcd;
    lcd.init();

    vTaskDelay(pdMS_TO_TICKS(5000));
    printf("Http clinent runs\n");
    esp_http_client_config_t config = {
        .url = "http://worldtimeapi.org/api/timezone/Europe/Warsaw",
        .event_handler = _http_event_handle,
    };
    esp_http_client_handle_t client = esp_http_client_init(&config);
    esp_err_t err = esp_http_client_perform(client);

    if (err == ESP_OK) {
        ESP_LOGI(TAG, "Status = %d, content_length = %d", esp_http_client_get_status_code(client), esp_http_client_get_content_length(client));
    }
    esp_http_client_cleanup(client);

    
    lcd.charXY(1, 1, '!');

    while (1) {
        gpio_set_level(GPIO_NUM_2, 1);
        vTaskDelay(pdMS_TO_TICKS(1000));
        gpio_set_level(GPIO_NUM_2, 0);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
